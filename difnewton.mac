numer:true$
difnewton(tabla):=block
(
    [xe,F,n,resp,titulo,polprog:"",polreg:"",fac:"",simplificado,j,jo,esNumeroX:true,esNumeroY:true],
    n:length(tabla),
    colum:length(tabla[1]),
    if (n=2 and colum>2) then
    (
      tabla:transpose(tabla),
      n:length(tabla)
    )else print("OJO: revisar que columnas son x,y"),

    x:col(tabla,1),
    F:zeromatrix(n,n-1),
    F:addcol(col(tabla,2),F),

    for i:2 thru n do
    (
        for j:2 thru i do
        (
            F[i][j]:(F[i][j-1]-F[i-1][j-1])/(x[i][1]-x[i-j+1][1])
        )
    ),
   
    resp:addcol(x,F),
    
    titulo:matrix(["X","F(x)"]),
    for i:1 thru n-1 do
    (
        titulo:addcol(titulo,[concat("Columna ",i)])
    ),
    resp:addrow(titulo,resp),
    
    /*ver si todos los elementos de la matriz son numeros*/
    for i:1 step 1 while (i<=n and esNumeroX=true and esNumeroY=true) do
    (
      esNumeroX:floatnump(tabla[i][1]) or integerp(tabla[i][1]),
      esNumeroY:floatnump(tabla[i][2]) or integerp(tabla[i][2])
    ),
    
    if ( (esNumeroX and esNumeroY) ) then
    (
       /*formando polinomio diferencias progresivas*/
       for i:1 thru n do
       (
   	polprog:concat(polprog,F[i][i],fac,"+"),
   	fac:concat(fac,"*(x-",x[i][1],")")
       ),
       eval_string(concat("pProg(x):=",polprog,"0")),
       print("-------Polinomio diferencias PROGRESIVAS----------"),
       print(fundef(pProg)),
       print(""),
   
   
       /*formando polinomio diferencias regresivas*/
       fac:"",
       j:n,
       jo:1,
       while(j>0)do
       (
   	polreg:concat(polreg,F[n][jo],fac,"+"),
   	fac:concat(fac,"*(x-",x[j][1],")"),
           j:j-1,
           jo:jo+1
       ),
       eval_string(concat("pReg(x):=",polreg,"0")),
       print("-------Polinomio diferencias REGRESIVAS----------"),
       print(fundef(pReg)),
       print("")
    ),

    return(resp)
)$