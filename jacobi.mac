/*-------------------------METODO DE JACOBI-------------------------
#+TITLE:     Método de Jacobi
#+AUTHOR:    wilson
#+EMAIL:     wilson@debian
#+DATE:      2016-02-27 sáb
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  es
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 

El método Jacobi es el método iterativo para resolver sistemas de
ecuaciones lineales más simple y se aplica sólo a sistemas cuadrados,
es decir a sistemas con tantas incógnitas como ecuaciones.


1) ENTRADA
    - A=matriz de coeficientes
    - b=matriz columna de los valores del otro miembro de cada ecuacion.
    - x_0=aproximacion al vector solucion como punto de partida de 
      las iteraciones. Debe ser tipo una matriz de 1xn
    - expo=exponente la tolerancia. Por ejemplo en la tolerancia
      ~1*10^(-3)~ ~expo~ vale ~3~
    - maximo numero de iteraciones ~N~
2) SALIDA
    - matriz con valores varios para cada iteracion, conteniendo
      los valores aproximados de las soluciones.
3) EJEMPLO
    Resolver el siguiente sistema de ecuación por el Método Jacobi
    utilizando una Tol≤ 0.001 y x_0=[0,0,0,0]
          -x_1 -  x_2 + 5x_3  +  x_4 =  0
          4x_1 +  x_2 -  x_3  +  x_4 = -2
           x_1 -  x_2 +  x_3  + 3x_4 =  1
           x_1 + 4x_2 -  x_3  -  x_4 = -1

solucion: haga esto en /maxima/. Lo siguiente es la muestra de una
        sesion en /maxima/ utilizando la funcion /newton/.
	
	#+BEGIN_EXAMPLE
	(%i1) A:matrix([4,1,-1,1],[1,4,-1,-1],[-1,-1,5,1],[1,-1,1,3]);
              b:matrix([-2],[-1],[0],[1]);
              x_0:matrix([0,0,0,0]);
                            [  4    1   - 1   1  ]
                            [                    ]
                            [  1    4   - 1  - 1 ]
                            [                    ]
                            [ - 1  - 1   5    1  ]
                            [                    ]
                            [  1   - 1   1    3  ]
                                    [ - 2 ]
                                    [     ]
                                    [ - 1 ]
                                    [     ]
                                    [  0  ]
                                    [     ]
                                    [  1  ]
                                [ 0  0  0  0 ]
        (%i2) jacobi(A,b,x_0,3,20);
	#+END_EXAMPLE

     El código para
    /maxima/ para la función /jacobi/, utilizada en este ejemplo
    es: (recuerde guardar el codigo en una archivo con la extensión
    /mac/ y cargarlo con /load/)

#+BEGIN_EXAMPLE
*/
numer:true$
jacobi(A,b,x_0,expo,N):=block
(
    [bool:true,x,er,temp,fila,TOL,tb,n],
    fpprintprec:expo+3,
    TOL:(10)^(-expo),
    n:length(A),
    x:copymatrix(x_0),
    tb:matrix(["N"]),
    tb:addcol(tb,makelist(concat("X",i),i,n),makelist(concat("EX",i),i,n),["ERROR"]),

    for k:1 step 1 while (k<=N and bool=true) do
    (
        for i:1 thru n do(            
            x[1][i]:(1/A[i][i])*(-lsum(A[i][j]*x_0[1][j],j,delete(i,makelist(expre,expre,1,n)))+b[i][1])
        ),
        er:abs(x-x_0),
        temp:sort(list_matrix_entries(er), 'ordergreatp),        
        fila:matrix([k]),
        fila:addcol(fila,x,er,[temp[1]]),
        tb:addrow(tb,fila),

        if is(temp[1]<TOL) then
        (
            print("tolerancia cumplida"),
            bool:false
        ),
        x_0:copymatrix(x)
    ),

    if bool then print("Iteraciones agotadas"),
    return(tb)
)$
/*#+END_EXAMPLE*/
