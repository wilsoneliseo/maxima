numer:true$
load(draw)$
polagrange(tabla):=block
(
  [fila,columna,p,evalu,forma,resp,n1,d1,y1,n2,d2,y2,n3,d3,y3,n4,d4,y4],

  if ( matrixp(tabla) ) then
  (
    fila:length(tabla),
    columna:length(tabla[1]),
    if (fila=2 and columna=2) then
    (
       print("POLINOMIO DE LAGRANGE GRADO UNO"),
       print(""),
       
       evalu:((x-tabla[1][2])/(tabla[1][1]-tabla[1][2]))*tabla[2][1]+\
       ((x-tabla[1][1])/(tabla[1][2]-tabla[1][1]))*tabla[2][2],
       evalu:ratsimp(evalu),
       define(p(x),evalu),


       forma:((x-concat(tabla[1][2]))/(concat(tabla[1][1])-\
           concat(tabla[1][2])))*concat("(",tabla[2][1],")")+\
       ((x-concat(tabla[1][1]))/(concat(tabla[1][2])-\
           concat(tabla[1][1])))* concat("(",tabla[2][2],")")=evalu,

       print(forma),
       print(fundef(p)),
       print(""),

       resp:read("Salida TeX y graficar? si= y; no= n;"),

       if(is(resp=y)) then
       (
          tex(forma),
	  tex('p(x)=evalu),
          draw2d(
             color=orange-red,
	     title="INTERPOLACION GRADO UNO",
	     key="Datos",
             point_type=7,
             point_size=2,
             points(tabla),
	     key="p(x)",
             explicit(p(x),x,tabla[1][1]-1,tabla[1][2]+1),
             terminal=wxt
          )
       )
    )
    elseif (fila=2 and columna=3) then
    (
       print("POLINOMIO DE LAGRANGE GRADO DOS"),
       print(""),

       n1:(x-tabla[1][2])*(x-tabla[1][3]),
       d1:(tabla[1][1]-tabla[1][2])*(tabla[1][1]-tabla[1][3]),
       y1:tabla[2][1],
       
       n2:(x-tabla[1][1])*(x-tabla[1][3]),
       d2:(tabla[1][2]-tabla[1][1])*(tabla[1][2]-tabla[1][3]),
       y2:tabla[2][2],

       n3:(x-tabla[1][1])*(x-tabla[1][2]),
       d3:(tabla[1][3]-tabla[1][1])*(tabla[1][3]-tabla[1][2]),
       y3:tabla[2][3],

       evalu:((n1/d1)*y1)+((n2/d2)*y2)+((n3/d3)*y3),
       evalu:ratsimp(evalu),
       define(p(x),evalu),

       forma:(((x-concat(tabla[1][2]))*(x-concat(tabla[1][3])))/((concat\
             (tabla[1][1])-concat(tabla[1][2]))*(concat(tabla[1][1])-\
             concat(tabla[1][3]))))*concat(tabla[2][1])+(((x-concat(tabla[1][1]\
               ))*(x-concat(tabla[1][3])))/((concat(tabla[1][2])-concat(\
               tabla[1][1]))*(concat(tabla[1][2])-concat(tabla[1][3]))))*\
             concat(tabla[2][2])+(((x-concat(tabla[1][1]))*(x-concat(tabla[1][2]\
               )))/((concat(tabla[1][3])-concat(tabla[1][1]))*\
             (concat(tabla[1][3])-concat(tabla[1][2]))))*\
             concat(tabla[2][3])=evalu,

       print(forma),
       print(fundef(p)),
       print(""),

       resp:read("Salida TeX y graficar? si= y; no= n;"),

       if(is(resp=y)) then
       (
          tex(forma),
	  tex('p(x)=evalu),

          draw2d(
             color=dark-green,
	     title="INTERPOLACION GRADO DOS",
	     key="Datos",
             point_type=7,
             point_size=2,
             points(tabla),
	     key="p(x)",
             explicit(p(x),x,tabla[1][1]-1,tabla[1][3]+1),
             terminal=wxt
          )
       )
      
    )
    elseif (fila=2 and columna=4) then
    (
       print("POLINOMIO DE LAGRANGE GRADO TRES"),
       print(""),

       n1:(x-tabla[1][2])*(x-tabla[1][3])\
              *(x-tabla[1][4]),
       d1:(tabla[1][1]-tabla[1][2])*(tabla[1][1]-tabla[1][3])\
              *(tabla[1][1]-tabla[1][4]),
       y1:tabla[2][1],



       n2:(x-tabla[1][1])*(x-tabla[1][3])\
              *(x-tabla[1][4]),
       d2:(tabla[1][2]-tabla[1][1])*(tabla[1][2]-tabla[1][3])\
              *(tabla[1][2]-tabla[1][4]),
       y2:tabla[2][2],



       n3:(x-tabla[1][1])*(x-tabla[1][2])\
              *(x-tabla[1][4]),
       d3:(tabla[1][3]-tabla[1][1])*(tabla[1][3]-tabla[1][2])\
              *(tabla[1][3]-tabla[1][4]),
       y3:tabla[2][3],



       n4:(x-tabla[1][1])*(x-tabla[1][2])*(x-tabla[1][3]),
       d4:(tabla[1][4]-tabla[1][1])*(tabla[1][4]-tabla[1][2])*\
          (tabla[1][4]-tabla[1][3]),
       y4:tabla[2][4],



       evalu:( (n1/d1)*y1 )+( (n2/d2)*y2 )+( (n3/d3)*y3 )+( (n4/d4)*y4 ),
       evalu:ratsimp(evalu),
       define(p(x),evalu),


       forma:(((x-concat(tabla[1][2]))*(x-concat(tabla[1][3]))*\
           (x-concat(tabla[1][4])))/((concat(tabla[1][1])-concat(\
           tabla[1][2]))*(concat(tabla[1][1])-concat(tabla[1][3]))*\
           (concat(tabla[1][1])-concat(tabla[1][4]))))*concat(tabla[2][1])\
           +(((x-concat(tabla[1][1]))*(x-concat(tabla[1][3]))*(x-\
           concat(tabla[1][4])))/((concat(tabla[1][2])-concat(tabla[1][1]))*\
           (concat(tabla[1][2])-concat(tabla[1][3]))*(concat(tabla[1][2])-\
           concat(tabla[1][4]))))*concat(tabla[2][2])+(((x-concat(tabla[1][1]))\
           *(x-concat(tabla[1][2]))*(x-concat(tabla[1][4])))/((concat(\
           tabla[1][3])-concat(tabla[1][1]))*(concat(tabla[1][3])-concat(\
           tabla[1][2]))*(concat(tabla[1][3])-concat(tabla[1][4]))))*concat(\
           tabla[2][3])+(((x-concat(tabla[1][1]))*(x-concat(tabla[1][2]))*\
           (x-concat(tabla[1][3])))/((concat(tabla[1][4])-concat(tabla[1][1]))*\
           (concat(tabla[1][4])-concat(tabla[1][2]))*(concat(tabla[1][4])-\
           concat(tabla[1][3]))))*concat(tabla[2][4])=evalu,


       print(forma),
       print(fundef(p)),
       print(""),

       resp:read("Salida TeX y graficar? si= y; no= n;"),

       if(is(resp=y)) then
       (
          tex(forma),
	  tex('p(x)=evalu),
          draw2d(
             color=dark-violet,
	     title="INTERPOLACION GRADO TRES",
	     key="Datos",
             point_type=7,
             point_size=2,
             points(tabla),
	     key="p(x)",
             explicit(p(x),x,tabla[1][1]-1,tabla[1][4]+1),
             terminal=wxt
          )
       )

    )
    else
    (
      print("La matriz del argumento requerido de: 2x2 2x3 o 2x4")      
    )
  
  )
  else
    print("El argumento no es una tabla matriz."),
    
  return("---WeGT---")
)$